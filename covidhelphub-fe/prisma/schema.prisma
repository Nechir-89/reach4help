// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Database Model

// Legend:
// < and > indicate there are multiple of that entity
// o indicates optional

//    owner ---> pet:   every owner has one or more pets
// .  pet <--- owner:   every owner has one or more pets
// .  person o---> car: a person optionally owns one or more cars

// Beneficiary (User) o---> Requests
//                    ----> Programs Assignments <---o Program
// Volunteer (User)   o--> Requests (Assigned to Help)
//                    ---> Programs Assignments <---o Program
// Program            ---> Pipeline Steps
//                    o--> Requests
// Request            <--o Program
//                    <--o Pipeline Step
//                    <--o Beneficiary
//                    <--o AssignedVolunteer
//                    o--> Volunteer Responses <--o Volunteer
//                    o--- Email Receipt

model User {
  UUID                String    @id @default(uuid())
  address             String
  email               String
  phone               String
  isVolunteer         Boolean
  volunteerNotes      String
  isBenificiary       Boolean
  beneficiaryNotes    String
  assignedRequests    Request[] @relation(name: "assigned")
  beneficiaryRequests Request[] @relation(name: "beneficiary")

  // programAssignments UserProgramAssignment[]
}

model Program {
  programUUID  String        @id @default(uuid())
  name         String
  ProgramSteps ProgramStep[]
}

model ProgramStep {
  UUID        String    @id @default(uuid())
  sequence    Int
  name        String
  Program     Program   @relation(fields: [programUUID], references: [programUUID])
  Requests    Request[]
  programUUID String
}

model Request {
  UUID                String                  @id @default(uuid())
  summary             String
  description         String
  ProgramStep         ProgramStep?            @relation(fields: [programStepUUID], references: [UUID])
  BeneficiaryUser     User?                   @relation("beneficiary", fields: [beneficiaryUserUUID], references: [UUID])
  AssignedUser        User?                   @relation("assigned", fields: [assignedUserUUID], references: [UUID])
  ProgramAssignments  UserProgramAssignment[]
  programStepUUID     String?
  beneficiaryUserUUID String?
  assignedUserUUID    String?
}

model UserProgramAssignment {
  UUID          String   @id @default(uuid())
  isVolunteer   String
  isBeneficiary String
  Request       Request? @relation(fields: [requestUUID], references: [UUID])
  requestUUID   String?
}

model responses {
  UUID         String @id @default(uuid())
  volunterUUID String
  isWilling    String
  responseText String
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
