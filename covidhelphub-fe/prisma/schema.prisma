// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Database Model

// Legend:
// < and > indicate there are multiple of that entity
// o - in a many to one, indicates relationship to parent is optional
//     A parent is never required to have children

//    owner ---> pet:   every pet has an owner
//    pet <--- owner:   every pet has an owner
//    buyer o---> car: a car can optionally have a buyer

//
//
// Volunteer (User)   o--> Requests (Assigned to Help) : no UI
//                    ---> Programs Assignments <--- Program : UI
// Program            <--- Pipeline --> Pipeline Steps : UI
//                    ---> Programs Assignments <--- Volunteer : No UI
//                    ---> Requests : No UI
//                    ---> Questions : UI
// Request            <--- Program : UI
// (including benef   <--- Pipeline Step : UI
//    info)           <--o AssignedVolunteer : UI
//                    ---> Volunteer Responses <--- Volunteer : UI
//                    ---> Answers <--- Question : UI
//                    ---> EmailReceipt : UI
//
// EmailTemplates     <--- Program : UI
//                    <--- Pipeline: UI
// Pipeline           o--> Pipeline Steps : UI
//                    o--> Program : No UI
//
// Following resources do not have screens devoted just to that resource
// Instead, these are entered as children of a parent object
//
// Question           o--> Answer <--- Request
//                    <--o Program
// Answer             <--o Request
//

model User {
  UUID                String    @id @default(uuid())
  address             String
  email               String
  phone               String
  isVolunteer         Boolean
  volunteerNotes      String
  isBenificiary       Boolean
  beneficiaryNotes    String
  assignedRequests    Request[] @relation(name: "assigned")
  beneficiaryRequests Request[] @relation(name: "beneficiary")

  // programAssignments UserProgramAssignment[]
}

model Program {
  UUID         String    @id @default(uuid())
  name         String
  Pipeline     Pipeline? @relation(fields: [pipelineUUID], references: [UUID])
  pipelineUUID String?
}

model Pipeline {
  UUID         String         @id @default(uuid())
  name         String
  PipelineStep PipelineStep[]
  Program      Program[]
}

model PipelineStep {
  UUID         String    @id @default(uuid())
  sequence     Int
  name         String
  Pipeline     Pipeline  @relation(fields: [pipelineUUID], references: [UUID])
  Requests     Request[]
  pipelineUUID String
}

model Request {
  UUID                String                  @id @default(uuid())
  summary             String
  description         String
  PipelineStep        PipelineStep?           @relation(fields: [pipelineStepUUID], references: [UUID])
  BeneficiaryUser     User?                   @relation("beneficiary", fields: [beneficiaryUserUUID], references: [UUID])
  AssignedUser        User?                   @relation("assigned", fields: [assignedUserUUID], references: [UUID])
  ProgramAssignments  UserProgramAssignment[]
  Responses           Response[]
  pipelineStepUUID    String?
  beneficiaryUserUUID String?
  assignedUserUUID    String?
}

model UserProgramAssignment {
  UUID          String   @id @default(uuid())
  isVolunteer   String
  isBeneficiary String
  Request       Request? @relation(fields: [requestUUID], references: [UUID])
  requestUUID   String?
}

model Response {
  UUID         String   @id @default(uuid())
  volunterUUID String
  isWilling    String
  responseText String
  Request      Request? @relation(fields: [requestUUID], references: [UUID])
  requestUUID  String?
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
} 
